;	NAME	'Dallas DS-1202 Clock Set/Read Utility'

;=======================================================================;
;									;
;  Written by Harold F Bower <HalBower@msn.com>, and contributed to	;
;  the P112 software pool.						;
;									;
;  This program is free software; you can redistribute it and/or	;
;  modify it under the terms of the GNU General Public License		;
;  as published by the Free Software Foundation; either version 2	;
;  of the License, or (at your option) any later version.		;
;									;
;  This program is distributed in the hope that it will be useful,	;
;  but WITHOUT ANY WARRANTY; without even the implied warranty of	;
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	;
;  GNU General Public License for more details.				;
;									;
;  You should have received a copy of the GNU General Public License	;
;  along with this program; if not, write to the Free Software		;
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.		;
;									;
;=======================================================================;

	.Z80
	INCLUDE	Z180.INC

CR	EQU	0DH
LF	EQU	0AH
BDOS	EQU	0005H
FCB	EQU	005CH

; Definitions for the P112 Clock Interface

DDRA	EQU	0EDH		; Z80182 Data Definition Register A
DRA	EQU	0EEH		; Z80182 Data Register A

RTCRst	EQU	2		; DS-1202 Reset\ Bit
RTCClk	EQU	1		; DS-1202 Clock Bit
RTCDat	EQU	0		; DS-1202 Data IO Bit

;------------------------------------------------------------------
BEGIN:	LD	(STACK),SP
	LD	SP,STACK
	LD	HL,FCB+1
	LD	A,(HL)
	CP	' '		; Anything entered?
	JP	Z,Read		; ..jump to read and display if Not
	CP	'/'		; Help Request?
	JP	NZ,SetIt	; ..jump if Not to Parse and Set
	CALL	PrHelp		; Else "Call" to transfer String Addr
	DB	CR,LF,'DS-1202 Clock Utility for P112',CR,LF,LF
	DB	'To set, both Date and Time Strings must be entered',CR,LF
	DB	'date first, then time.  Two digits MUST be entered',CR,LF
	DB	'for each field, except for the time where seconds',CR,LF
	DB	'which always default to 00.  The Syntax is:',CR,LF,LF
	DB	'  DS1202                 <- Display current Date/Time',CR,LF
	DB	'  DS1202 06/10/96 17-10  <- Set to 10 Jun 96, 5:10PM',CR,LF
	DB	'      (NOTE: Unique separator requirements)',CR,LF
	DB	'  DS1202 //              <- Display this message',CR,LF,'$'
PrHelp:	POP	DE		; String Addr to DE
	LD	C,9
	CALL	BDOS		;  print
Exit:	LD	SP,(STACK)	;   restore Stack Pointer
	RET			;    and back to OS

;-----------------------------------------------------------------------
; Parse the Command Line into the Clock Buffer, activate and Set the Clock.

SetIt:	CALL	GetBCD		; Get BCD Month
	JR	C,BadDat	; ..Err if Invalid
	LD	(TimStr+4),A
	LD	A,(HL)
	CP	'/'		; Valid Separator?
	JR	NZ,BadDat	; ..Err if Not
	INC	HL
	CALL	GetBCD		; Get BCD Day
	JR	C,BadDat	; ..Err if Invalid
	LD	(TimStr+3),A
	LD	A,(HL)
	CP	'/'
	JR	NZ,BadDat
	INC	HL
	CALL	GetBCD		; Get BCD Year
	JR	C,BadDat	; ..Err if Invalid
	LD	(TimStr+6),A

	LD	HL,FCB+17	; Pt to Secondary FCB for Time
	CALL	GetBCD		; Get BCD Hours
	JR	C,BadDat	; ..Err if Invalid
	SET	7,A		;  (Force 24-hour)
	LD	(TimStr+2),A
	LD	A,(HL)
	CP	'-'
	JR	NZ,BadDat
	INC	HL
	CALL	GetBCD		; Get BCD Minutes
	JR	C,BadDat	; ..Err if Invalid
	LD	(TimStr+1),A
	XOR	A
	LD	(TimStr),A
	INC	A
	LD	(TimStr+5),A	; Default DOW to Day 1
	CALL	StTim		;  Activate and Set the Clock
	JP	Exit		; ..and Quit

BadDat:	CALL	BadDa0
	DB	7,CR,LF,'+++ Error in Data String!',CR,LF,'$'
BadDa0:	POP	DE
	LD	C,9
	CALL	BDOS
	JP	Exit

;.....
; Activate the Clock chip and set Date/Time from the parsed string

StTim:	CALL	COpen		; Open the Clock
	LD	A,8EH
	CALL	WrByte		; Write-Protect Off
	LD	A,0
	CALL	WrByte
	CALL	CClosW
	CALL	COpen
	LD	A,0BEH		; Burst Write
	LD	B,8		;  8 bytes
	CALL	WrByte
	LD	HL,TimStr
StTi0:	LD	A,(HL)
	CALL	WrByte
	INC	HL
	DJNZ	StTi0
	CALL	CClosW
	JP	Exit

;.....
; Write byte in A to Clock

WrByte:	PUSH	BC
	LD	C,A
	LD	B,8
	IN0	A,(DDRA)
	RES	RTCDat,A	; Data Line OUT
	OUT0	(DDRA),A

LW:	IN	A,(C)
	RES	RTCClk,A
	OUT	(C),A		; Clock Falls
	SRL	A
	RRC	C
	RLA			; Data => A[0]
	OUT	(C),A
	SET	RTCClk,A
	OUT	(C),A		; Clock Rises
	DJNZ	LW

	IN0	A,(DDRA)
	SET	RTCDat,A
	OUT	(DDRA),A

	POP	BC
	RET

;----------------------------------------------------------------------
; Read the Clock and Display Results

Read:	LD	DE,TimStr	; Point to the Destination Time String
	CALL	RdTime		;  Read
	CALL	Read0
	DB	CR,LF,'Clock Reports: $'
Read0:	POP	DE
	LD	C,9
	CALL	BDOS
	LD	HL,TimStr+1	; Pt to Month
	LD	A,(HL)		;  fetch
	CALL	Pr2Hex		;   Print
	LD	A,'/'
	CALL	COut
	INC	HL
	LD	A,(HL)		; Fetch Day
	CALL	Pr2Hex
	LD	A,'/'
	CALL	COut
	DEC	HL
	DEC	HL
	LD	A,(HL)		; Fetch Year
	CALL	Pr2Hex
	CALL	Read1
	DB	'   $'
Read1:	POP	DE
	LD	C,9
	CALL	BDOS
	LD	HL,TimStr+3
	LD	A,(HL)		; Fetch Hours
	CALL	Pr2Hex
	LD	A,':'
	CALL	COut
	INC	HL
	LD	A,(HL)		; Fetch Minutes
	CALL	Pr2Hex
	LD	A,':'
	CALL	COut
	INC	HL
	LD	A,(HL)		; Fetch Seconds
	CALL	Pr2Hex
	CALL	Read2
	DB	CR,LF,'$'
Read2:	POP	DE
	LD	C,9
	CALL	BDOS
	JP	Exit		; ..quit

;.....
; Attempt to convert two bytes addressed by HL to a Packed BCD Byte
; Carry Set if Invalid

GetBCD:	CALL	CkDig
	RET	C		; Return if Invalid
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	C,A
	CALL	CkDig
	RET	C
	OR	C
	RET

CkDig:	LD	A,(HL)
	INC	HL
	SUB	'0'
	RET	C
	CP	9+1
	CCF
	RET

;.....
Pr2Hex:	PUSH	AF
	RRCA
	RRCA
	RRCA
	RRCA
	CALL	PrHex
	POP	AF
PrHex:	AND	0FH
	ADD	A,90H
	DAA
	ADC	A,40H
	DAA
COut:	LD	E,A
	LD	C,2
	PUSH	HL
	CALL	BDOS
	POP	HL
	RET

;-------------------------------------------------------------------------
; Dallas DS-1202 Clock Interface on the D-X Designs Pty Ltd P112.
;  Read the Clock to a buffer area in Memory.  Seven bytes (Six used) are
; read in burst mode from the clock chip, one bit at a time via three bits
; from one of the Z-182 parallel ports.  When Setting the clock from this
; code fragment, the DOW is forced to 01H, which will probably be invalid.
; The Clock is accessed serially (LSB first) one byte at a time with a
; command byte being written to begin the Read/Write.  Burst Mode is used
; with a 0BFH byte for Reading, 0BEH for Writing as the Command.  Clock
; Setting clears the Write Protect bit before setting, and resets the chip
; to Read-Only when finished.  The Entire Date/Time String is eight bytes
; read as:
;
;	Sec   Min   Hour   Day   Mon   DOW   Year   WProt
;                  (12/24)                          (MSB)
;
; In this implementation, the DOW field is not used, and the 12/24 hour bit
; is always set to 24-hour mode by setting the MSB to 1.

RdTime:	CALL	CSETUP		; Set Clock to Read, returning BC->DRA Port
	LD	DE,5		;   (above also moved ptr to HL)
	ADD	HL,DE		;  offset to Seconds Field
	LD	E,(HL)		;   fetch orig contents
	PUSH	DE		;    (Save for Exit)
	PUSH	HL		;     (and preserve ptr)

; Command the DS-1202 for Burst Read of Clock

	LD	A,0BFH		; Load the Burst Clock Read Command
	CALL	Wr1202		;  and Send it

; Read the Clock Data.  D still 0 from above Load, use as Byte Index

RdTim0:	PUSH	HL		; Save Ptr
	LD	E,8		; Gather 8 bit for a byte
RdTim1:	IN	A,(C)		; Read Port
	RES	RTCClk,A	;  Clock LO
	OUT	(C),A		;   Set
	NOP			;    (settle)
	IN	A,(C)		;     Read Bit to LSB
	RRCA			; Data Bit to Carry
	RR	L		;  to MSB of Accum
	RLCA			;   restore Parallel Port bits
	SET	RTCClk,A	; Clock HI
	OUT	(C),A		;  Set
	DEC	E		; Byte Done?
	JR	NZ,RdTim1	; ..jump if Not

	LD	E,L		; Else Get Byte
	POP	HL		; Restore Ptr to Dest
	LD	A,D		; Get Index
	CP	6		; Done?
	JR	Z,RdTimY	; ..jump if So to save Hrs MSB
	CP	5		; Day-Of-Week?
	JR	Z,RdTim2	; ..jump if So, bypassing save
	RES	7,E		; Else Clear MSB to handle 12/24 hr bit
RdTimY:	LD	(HL),E		; Save value in output string
	DEC	HL		;  back down to previous byte in output
RdTim2:	INC	D		;   increment index
	CP	6		; Did we just save Year?
	JR	NZ,RdTim0	; ..get another byte if So
	CALL	CClose		; Else Deselect Clock
	POP	HL		; Restore Ptr
	POP	DE		;  Orig Seconds content (and 0 Tenths)
	LD	A,01H		;   Set Good Exit
	RET			;   and Quit

;.....
; Set up DS-1202 interface from Z80182 Parallel port
; Entry: None
; Exit : BC -> Data Port w/Clk at bits 0-2
; Uses : AF,BC,DE

CSETUP:	EX	DE,HL		; Move Pointer to HL
COpen:	LD	BC,DDRA		; Address Parallel Port A Control
	IN	A,(C)		; Read Settings
	SET	RTCDat,A	;  Data Line to Input
	OUT	(C),A		;   and Set
	INC	BC		; Address Parallel Port A (DRA)
	IN	A,(C)		; Fetch settings
	RES	RTCClk,A	;  Clk LO to Start
	OUT	(C),A		;   (set)
	SET	RTCRst,A	;    Clear Reset to HI
	OUT	(C),A		;     (set)
	RET

;.....
; Write the Byte in A to the clock (used for Command)
; Entry: BC -> Data Port (DRA)
; Exit : None
; Uses : AF,E

Wr1202:	PUSH	HL		; Save Regs
	LD	L,A		;  Store byte
	LD	E,8		;   set bit count
	IN0	A,(DDRA)	; Fetch Def'n Reg contents
	RES	RTCDat,A	;  Data Line to Output
	OUT0	(DDRA),A	;   (set)
Wr120L:	IN	A,(C)		; Read Parallel Port
	RES	RTCClk,A	;  Clk LO
	OUT	(C),A		;   (set)
	SRL	A		; (clear LSB)
	RR	L		; Data Byte LSB to Carry
	RLA			;  then to Parallel Port LSB
	OUT	(C),A		;   (set)
	SET	RTCClk,A	; Clk HI
	OUT	(C),A		;  (set)
	DEC	E		; Eight Bits Sent?
	JR	NZ,Wr120L	; ..loop if Not

	IN0	A,(DDRA)
	SET	RTCDat,A	; Set Port to Data IN
	OUT0	(DDRA),A
	POP	HL		;  Restore Regs
	RET

;.....
; Deselect the Clock for Exit
; Enter: BC -> Z80182 Parallel Port A
; Exit : None
; Uses : AF

CClosW:	IN0	A,(DDRA)
	SET	RTCDat,A	; Data Line IN
	OUT0	(DDRA),A

CClose:	IN	A,(C)		; Fetch Parallel Port
	SET	RTCClk,A	;  Clk to HI
	OUT	(C),A
	RES	RTCRst,A	;   Reset Active LO
	OUT	(C),A
	RET

;=====================================================
	DSEG
TimStr:	DS	8		; String for Reading/Setting Date/Time
	DS	64		; Stack Space
STACK:	DS	2
	END
